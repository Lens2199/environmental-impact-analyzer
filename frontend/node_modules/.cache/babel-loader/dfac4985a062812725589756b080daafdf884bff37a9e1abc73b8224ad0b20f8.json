{"ast":null,"code":"var _jsxFileName = \"/Users/deocherisme/environmental-impact-analyzer/frontend/src/context/AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { productAPI, analysisAPI } from '../services/api';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\n/**\n * AppContext Provider Component\n * Manages global application state\n */\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // Recent analyses state\n  const [recentAnalyses, setRecentAnalyses] = useState([]);\n  const [loadingAnalyses, setLoadingAnalyses] = useState(false);\n  const [analysesError, setAnalysesError] = useState(null);\n\n  // Selected products for comparison\n  const [selectedProducts, setSelectedProducts] = useState([]);\n\n  // User preferences (could be expanded or stored in localStorage)\n  const [preferences, setPreferences] = useState({\n    darkMode: false,\n    showScores: true,\n    defaultView: 'grid'\n  });\n\n  // Notifications\n  const [notifications, setNotifications] = useState([]);\n\n  // Fetch recent analyses on component mount\n  useEffect(() => {\n    fetchRecentAnalyses();\n  }, []);\n\n  // Function to fetch recent analyses\n  const fetchRecentAnalyses = async () => {\n    try {\n      setLoadingAnalyses(true);\n      setAnalysesError(null);\n      const response = await analysisAPI.getAnalysisHistory();\n      setRecentAnalyses(response.data.analyses || response.data || []);\n    } catch (error) {\n      console.error('Error fetching analyses:', error);\n      setAnalysesError('Failed to load recent analyses');\n    } finally {\n      setLoadingAnalyses(false);\n    }\n  };\n\n  // Add or remove product from selected products for comparison\n  const toggleProductSelection = productId => {\n    if (selectedProducts.includes(productId)) {\n      setSelectedProducts(selectedProducts.filter(id => id !== productId));\n    } else {\n      // Limit to 3 products maximum\n      if (selectedProducts.length < 3) {\n        setSelectedProducts([...selectedProducts, productId]);\n      } else {\n        // Add notification if more than 3 products are selected\n        addNotification({\n          type: 'warning',\n          message: 'You can only compare up to 3 products at a time',\n          duration: 3000\n        });\n      }\n    }\n  };\n\n  // Clear all selected products\n  const clearSelectedProducts = () => {\n    setSelectedProducts([]);\n  };\n\n  // Update user preferences\n  const updatePreferences = newPreferences => {\n    setPreferences({\n      ...preferences,\n      ...newPreferences\n    });\n\n    // In a real app, you might save preferences to localStorage\n    localStorage.setItem('userPreferences', JSON.stringify({\n      ...preferences,\n      ...newPreferences\n    }));\n  };\n\n  // Add notification\n  const addNotification = notification => {\n    const id = Date.now();\n    const newNotification = {\n      id,\n      type: notification.type || 'info',\n      message: notification.message,\n      duration: notification.duration || 5000\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove notification after duration\n    if (newNotification.duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, newNotification.duration);\n    }\n  };\n\n  // Remove notification\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  // Load stored preferences from localStorage\n  useEffect(() => {\n    try {\n      const storedPreferences = localStorage.getItem('userPreferences');\n      if (storedPreferences) {\n        setPreferences(JSON.parse(storedPreferences));\n      }\n    } catch (error) {\n      console.error('Error loading preferences:', error);\n    }\n  }, []);\n\n  // Value to be provided by the context\n  const contextValue = {\n    // Analyses\n    recentAnalyses,\n    loadingAnalyses,\n    analysesError,\n    fetchRecentAnalyses,\n    // Products for comparison\n    selectedProducts,\n    toggleProductSelection,\n    clearSelectedProducts,\n    // User preferences\n    preferences,\n    updatePreferences,\n    // Notifications\n    notifications,\n    addNotification,\n    removeNotification\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"2hSVqWvptYChL44YkAaUGQgNeOI=\");\n_c = AppProvider;\nAppProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n/**\n * Custom hook to use the app context\n */\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","PropTypes","productAPI","analysisAPI","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","recentAnalyses","setRecentAnalyses","loadingAnalyses","setLoadingAnalyses","analysesError","setAnalysesError","selectedProducts","setSelectedProducts","preferences","setPreferences","darkMode","showScores","defaultView","notifications","setNotifications","fetchRecentAnalyses","response","getAnalysisHistory","data","analyses","error","console","toggleProductSelection","productId","includes","filter","id","length","addNotification","type","message","duration","clearSelectedProducts","updatePreferences","newPreferences","localStorage","setItem","JSON","stringify","notification","Date","now","newNotification","prev","setTimeout","removeNotification","storedPreferences","getItem","parse","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","useAppContext","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/deocherisme/environmental-impact-analyzer/frontend/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { productAPI, analysisAPI } from '../services/api';\n\n// Create context\nconst AppContext = createContext();\n\n/**\n * AppContext Provider Component\n * Manages global application state\n */\nexport const AppProvider = ({ children }) => {\n  // Recent analyses state\n  const [recentAnalyses, setRecentAnalyses] = useState([]);\n  const [loadingAnalyses, setLoadingAnalyses] = useState(false);\n  const [analysesError, setAnalysesError] = useState(null);\n  \n  // Selected products for comparison\n  const [selectedProducts, setSelectedProducts] = useState([]);\n  \n  // User preferences (could be expanded or stored in localStorage)\n  const [preferences, setPreferences] = useState({\n    darkMode: false,\n    showScores: true,\n    defaultView: 'grid',\n  });\n  \n  // Notifications\n  const [notifications, setNotifications] = useState([]);\n  \n  // Fetch recent analyses on component mount\n  useEffect(() => {\n    fetchRecentAnalyses();\n  }, []);\n  \n  // Function to fetch recent analyses\n  const fetchRecentAnalyses = async () => {\n    try {\n      setLoadingAnalyses(true);\n      setAnalysesError(null);\n      \n      const response = await analysisAPI.getAnalysisHistory();\n      setRecentAnalyses(response.data.analyses || response.data || []);\n      \n    } catch (error) {\n      console.error('Error fetching analyses:', error);\n      setAnalysesError('Failed to load recent analyses');\n    } finally {\n      setLoadingAnalyses(false);\n    }\n  };\n  \n  // Add or remove product from selected products for comparison\n  const toggleProductSelection = (productId) => {\n    if (selectedProducts.includes(productId)) {\n      setSelectedProducts(selectedProducts.filter(id => id !== productId));\n    } else {\n      // Limit to 3 products maximum\n      if (selectedProducts.length < 3) {\n        setSelectedProducts([...selectedProducts, productId]);\n      } else {\n        // Add notification if more than 3 products are selected\n        addNotification({\n          type: 'warning',\n          message: 'You can only compare up to 3 products at a time',\n          duration: 3000\n        });\n      }\n    }\n  };\n  \n  // Clear all selected products\n  const clearSelectedProducts = () => {\n    setSelectedProducts([]);\n  };\n  \n  // Update user preferences\n  const updatePreferences = (newPreferences) => {\n    setPreferences({ ...preferences, ...newPreferences });\n    \n    // In a real app, you might save preferences to localStorage\n    localStorage.setItem('userPreferences', JSON.stringify({\n      ...preferences,\n      ...newPreferences\n    }));\n  };\n  \n  // Add notification\n  const addNotification = (notification) => {\n    const id = Date.now();\n    const newNotification = {\n      id,\n      type: notification.type || 'info',\n      message: notification.message,\n      duration: notification.duration || 5000\n    };\n    \n    setNotifications(prev => [...prev, newNotification]);\n    \n    // Auto-remove notification after duration\n    if (newNotification.duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, newNotification.duration);\n    }\n  };\n  \n  // Remove notification\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n  \n  // Load stored preferences from localStorage\n  useEffect(() => {\n    try {\n      const storedPreferences = localStorage.getItem('userPreferences');\n      if (storedPreferences) {\n        setPreferences(JSON.parse(storedPreferences));\n      }\n    } catch (error) {\n      console.error('Error loading preferences:', error);\n    }\n  }, []);\n  \n  // Value to be provided by the context\n  const contextValue = {\n    // Analyses\n    recentAnalyses,\n    loadingAnalyses,\n    analysesError,\n    fetchRecentAnalyses,\n    \n    // Products for comparison\n    selectedProducts,\n    toggleProductSelection,\n    clearSelectedProducts,\n    \n    // User preferences\n    preferences,\n    updatePreferences,\n    \n    // Notifications\n    notifications,\n    addNotification,\n    removeNotification\n  };\n  \n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nAppProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n/**\n * Custom hook to use the app context\n */\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}