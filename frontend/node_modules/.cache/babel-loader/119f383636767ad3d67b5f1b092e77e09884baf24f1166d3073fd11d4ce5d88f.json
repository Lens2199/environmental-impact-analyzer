{"ast":null,"code":"import api from './apiService';\n\n// Products API\nexport const productAPI = {\n  // Get all products\n  getAllProducts: (params = {}) => api.get('/products', params),\n  // Get a single product by ID\n  getProductById: id => {\n    if (!id || id === 'undefined') {\n      console.error('Invalid product ID:', id);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.get(`/products/${id}`);\n  },\n  // Search products\n  searchProducts: (query, params = {}) => api.get(`/products/search/${query}`, params),\n  // Create a new product\n  createProduct: productData => api.post('/products', productData),\n  // Update a product\n  updateProduct: (id, productData) => {\n    if (!id || id === 'undefined') {\n      console.error('Invalid product ID for update:', id);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.put(`/products/${id}`, productData);\n  },\n  // Delete a product\n  deleteProduct: id => {\n    if (!id || id === 'undefined') {\n      console.error('Invalid product ID for deletion:', id);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.delete(`/products/${id}`);\n  },\n  // Get products by category\n  getProductsByCategory: (category, params = {}) => api.get('/products', {\n    ...params,\n    category\n  })\n};\n\n// Analysis API\nexport const analysisAPI = {\n  // Analyze product from text description\n  analyzeProductText: productText => api.post('/analysis/analyze-text', {\n    productText\n  }),\n  // Analyze existing product by ID\n  analyzeExistingProduct: (productId, force = false) => {\n    if (!productId || productId === 'undefined') {\n      console.error('Invalid product ID for analysis:', productId);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.post(`/analysis/analyze-product/${productId}`, {}, {\n      params: {\n        force\n      }\n    });\n  },\n  // Get analysis history\n  getAnalysisHistory: (page = 1, limit = 10) => api.get('/analysis/history', {\n    page,\n    limit\n  }),\n  // Get analysis by ID\n  getAnalysisById: id => {\n    if (!id || id === 'undefined') {\n      console.error('Invalid analysis ID:', id);\n      return Promise.reject(new Error('Invalid analysis ID'));\n    }\n    return api.get(`/analysis/${id}`);\n  },\n  // Get latest analysis for a product\n  getProductAnalysis: productId => {\n    if (!productId || productId === 'undefined') {\n      console.error('Invalid product ID for analysis lookup:', productId);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.get(`/analysis/product/${productId}`);\n  },\n  // Compare multiple products\n  compareProducts: (productIds, detailed = false) => {\n    if (!productIds || !Array.isArray(productIds) || productIds.length === 0) {\n      console.error('Invalid product IDs for comparison:', productIds);\n      return Promise.reject(new Error('Invalid product IDs for comparison'));\n    }\n    // Filter out any invalid IDs\n    const validProductIds = productIds.filter(id => id && id !== 'undefined');\n    if (validProductIds.length === 0) {\n      return Promise.reject(new Error('No valid product IDs for comparison'));\n    }\n    return api.post('/analysis/compare', {\n      productIds: validProductIds\n    }, {\n      params: {\n        detailed\n      }\n    });\n  }\n};\n\n// Guide and content API (for future content management)\nexport const contentAPI = {\n  // Get sustainability tips\n  getSustainabilityTips: category => api.get('/content/sustainability-tips', {\n    category\n  }),\n  // Get sustainable materials information\n  getMaterialsInfo: () => api.get('/content/materials'),\n  // Get latest articles or blog posts\n  getArticles: (page = 1, limit = 5) => api.get('/content/articles', {\n    page,\n    limit\n  })\n};\nconst apiServices = {\n  products: productAPI,\n  analysis: analysisAPI,\n  content: contentAPI\n};\nexport default apiServices;","map":{"version":3,"names":["api","productAPI","getAllProducts","params","get","getProductById","id","console","error","Promise","reject","Error","searchProducts","query","createProduct","productData","post","updateProduct","put","deleteProduct","delete","getProductsByCategory","category","analysisAPI","analyzeProductText","productText","analyzeExistingProduct","productId","force","getAnalysisHistory","page","limit","getAnalysisById","getProductAnalysis","compareProducts","productIds","detailed","Array","isArray","length","validProductIds","filter","contentAPI","getSustainabilityTips","getMaterialsInfo","getArticles","apiServices","products","analysis","content"],"sources":["/Users/deocherisme/environmental-impact-analyzer/frontend/src/services/api.js"],"sourcesContent":["import api from './apiService';\n\n// Products API\nexport const productAPI = {\n  // Get all products\n  getAllProducts: (params = {}) => \n    api.get('/products', params),\n  \n  // Get a single product by ID\n  getProductById: (id) => {\n    if (!id || id === 'undefined') {\n      console.error('Invalid product ID:', id);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.get(`/products/${id}`);\n  },\n  \n  // Search products\n  searchProducts: (query, params = {}) => \n    api.get(`/products/search/${query}`, params),\n  \n  // Create a new product\n  createProduct: (productData) => \n    api.post('/products', productData),\n  \n  // Update a product\n  updateProduct: (id, productData) => {\n    if (!id || id === 'undefined') {\n      console.error('Invalid product ID for update:', id);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.put(`/products/${id}`, productData);\n  },\n  \n  // Delete a product\n  deleteProduct: (id) => {\n    if (!id || id === 'undefined') {\n      console.error('Invalid product ID for deletion:', id);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.delete(`/products/${id}`);\n  },\n  \n  // Get products by category\n  getProductsByCategory: (category, params = {}) => \n    api.get('/products', { ...params, category }),\n};\n\n// Analysis API\nexport const analysisAPI = {\n  // Analyze product from text description\n  analyzeProductText: (productText) => \n    api.post('/analysis/analyze-text', { productText }),\n  \n  // Analyze existing product by ID\n  analyzeExistingProduct: (productId, force = false) => {\n    if (!productId || productId === 'undefined') {\n      console.error('Invalid product ID for analysis:', productId);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.post(`/analysis/analyze-product/${productId}`, {}, { params: { force } });\n  },\n  \n  // Get analysis history\n  getAnalysisHistory: (page = 1, limit = 10) => \n    api.get('/analysis/history', { page, limit }),\n  \n  // Get analysis by ID\n  getAnalysisById: (id) => {\n    if (!id || id === 'undefined') {\n      console.error('Invalid analysis ID:', id);\n      return Promise.reject(new Error('Invalid analysis ID'));\n    }\n    return api.get(`/analysis/${id}`);\n  },\n  \n  // Get latest analysis for a product\n  getProductAnalysis: (productId) => {\n    if (!productId || productId === 'undefined') {\n      console.error('Invalid product ID for analysis lookup:', productId);\n      return Promise.reject(new Error('Invalid product ID'));\n    }\n    return api.get(`/analysis/product/${productId}`);\n  },\n  \n  // Compare multiple products\n  compareProducts: (productIds, detailed = false) => {\n    if (!productIds || !Array.isArray(productIds) || productIds.length === 0) {\n      console.error('Invalid product IDs for comparison:', productIds);\n      return Promise.reject(new Error('Invalid product IDs for comparison'));\n    }\n    // Filter out any invalid IDs\n    const validProductIds = productIds.filter(id => id && id !== 'undefined');\n    if (validProductIds.length === 0) {\n      return Promise.reject(new Error('No valid product IDs for comparison'));\n    }\n    return api.post('/analysis/compare', { productIds: validProductIds }, { params: { detailed } });\n  },\n};\n\n// Guide and content API (for future content management)\nexport const contentAPI = {\n  // Get sustainability tips\n  getSustainabilityTips: (category) => \n    api.get('/content/sustainability-tips', { category }),\n  \n  // Get sustainable materials information\n  getMaterialsInfo: () => \n    api.get('/content/materials'),\n  \n  // Get latest articles or blog posts\n  getArticles: (page = 1, limit = 5) => \n    api.get('/content/articles', { page, limit }),\n};\n\nconst apiServices = {\n  products: productAPI,\n  analysis: analysisAPI,\n  content: contentAPI,\n};\n\nexport default apiServices;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}