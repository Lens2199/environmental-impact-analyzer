{"ast":null,"code":"import api from './apiService';\n\n// Products API\nexport const productAPI = {\n  // Get all products\n  getAllProducts: (params = {}) => api.get('/products', params),\n  // Get a single product by ID\n  getProductById: id => api.get(`/products/${id}`),\n  // Search products\n  searchProducts: (query, params = {}) => api.get(`/products/search/${query}`, params),\n  // Create a new product\n  createProduct: productData => api.post('/products', productData),\n  // Update a product\n  updateProduct: (id, productData) => api.put(`/products/${id}`, productData),\n  // Delete a product\n  deleteProduct: id => api.delete(`/products/${id}`),\n  // Get products by category\n  getProductsByCategory: (category, params = {}) => api.get('/products', {\n    ...params,\n    category\n  })\n};\n\n// Analysis API\nexport const analysisAPI = {\n  // Analyze product from text description\n  analyzeProductText: productText => api.post('/analysis/analyze-text', {\n    productText\n  }),\n  // Analyze existing product by ID\n  analyzeExistingProduct: (productId, force = false) => api.post(`/analysis/analyze-product/${productId}`, {}, {\n    params: {\n      force\n    }\n  }),\n  // Get analysis history\n  getAnalysisHistory: (page = 1, limit = 10) => api.get('/analysis/history', {\n    page,\n    limit\n  }),\n  // Get analysis by ID\n  getAnalysisById: id => api.get(`/analysis/${id}`),\n  // Get latest analysis for a product\n  getProductAnalysis: productId => api.get(`/analysis/product/${productId}`),\n  // Compare multiple products\n  compareProducts: (productIds, detailed = false) => api.post('/analysis/compare', {\n    productIds\n  }, {\n    params: {\n      detailed\n    }\n  })\n};\n\n// Guide and content API (for future content management)\nexport const contentAPI = {\n  // Get sustainability tips\n  getSustainabilityTips: category => api.get('/content/sustainability-tips', {\n    category\n  }),\n  // Get sustainable materials information\n  getMaterialsInfo: () => api.get('/content/materials'),\n  // Get latest articles or blog posts\n  getArticles: (page = 1, limit = 5) => api.get('/content/articles', {\n    page,\n    limit\n  })\n};\nexport default {\n  products: productAPI,\n  analysis: analysisAPI,\n  content: contentAPI\n};","map":{"version":3,"names":["api","productAPI","getAllProducts","params","get","getProductById","id","searchProducts","query","createProduct","productData","post","updateProduct","put","deleteProduct","delete","getProductsByCategory","category","analysisAPI","analyzeProductText","productText","analyzeExistingProduct","productId","force","getAnalysisHistory","page","limit","getAnalysisById","getProductAnalysis","compareProducts","productIds","detailed","contentAPI","getSustainabilityTips","getMaterialsInfo","getArticles","products","analysis","content"],"sources":["/Users/deocherisme/environmental-impact-analyzer/frontend/src/services/api.js"],"sourcesContent":["import api from './apiService';\n\n// Products API\nexport const productAPI = {\n  // Get all products\n  getAllProducts: (params = {}) => \n    api.get('/products', params),\n  \n  // Get a single product by ID\n  getProductById: (id) => \n    api.get(`/products/${id}`),\n  \n  // Search products\n  searchProducts: (query, params = {}) => \n    api.get(`/products/search/${query}`, params),\n  \n  // Create a new product\n  createProduct: (productData) => \n    api.post('/products', productData),\n  \n  // Update a product\n  updateProduct: (id, productData) => \n    api.put(`/products/${id}`, productData),\n  \n  // Delete a product\n  deleteProduct: (id) => \n    api.delete(`/products/${id}`),\n  \n  // Get products by category\n  getProductsByCategory: (category, params = {}) => \n    api.get('/products', { ...params, category }),\n};\n\n// Analysis API\nexport const analysisAPI = {\n  // Analyze product from text description\n  analyzeProductText: (productText) => \n    api.post('/analysis/analyze-text', { productText }),\n  \n  // Analyze existing product by ID\n  analyzeExistingProduct: (productId, force = false) => \n    api.post(`/analysis/analyze-product/${productId}`, {}, { params: { force } }),\n  \n  // Get analysis history\n  getAnalysisHistory: (page = 1, limit = 10) => \n    api.get('/analysis/history', { page, limit }),\n  \n  // Get analysis by ID\n  getAnalysisById: (id) => \n    api.get(`/analysis/${id}`),\n  \n  // Get latest analysis for a product\n  getProductAnalysis: (productId) => \n    api.get(`/analysis/product/${productId}`),\n  \n  // Compare multiple products\n  compareProducts: (productIds, detailed = false) => \n    api.post('/analysis/compare', { productIds }, { params: { detailed } }),\n};\n\n// Guide and content API (for future content management)\nexport const contentAPI = {\n  // Get sustainability tips\n  getSustainabilityTips: (category) => \n    api.get('/content/sustainability-tips', { category }),\n  \n  // Get sustainable materials information\n  getMaterialsInfo: () => \n    api.get('/content/materials'),\n  \n  // Get latest articles or blog posts\n  getArticles: (page = 1, limit = 5) => \n    api.get('/content/articles', { page, limit }),\n};\n\nexport default {\n  products: productAPI,\n  analysis: analysisAPI,\n  content: contentAPI,\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;;AAE9B;AACA,OAAO,MAAMC,UAAU,GAAG;EACxB;EACAC,cAAc,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,KAC1BH,GAAG,CAACI,GAAG,CAAC,WAAW,EAAED,MAAM,CAAC;EAE9B;EACAE,cAAc,EAAGC,EAAE,IACjBN,GAAG,CAACI,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;EAE5B;EACAC,cAAc,EAAEA,CAACC,KAAK,EAAEL,MAAM,GAAG,CAAC,CAAC,KACjCH,GAAG,CAACI,GAAG,CAAC,oBAAoBI,KAAK,EAAE,EAAEL,MAAM,CAAC;EAE9C;EACAM,aAAa,EAAGC,WAAW,IACzBV,GAAG,CAACW,IAAI,CAAC,WAAW,EAAED,WAAW,CAAC;EAEpC;EACAE,aAAa,EAAEA,CAACN,EAAE,EAAEI,WAAW,KAC7BV,GAAG,CAACa,GAAG,CAAC,aAAaP,EAAE,EAAE,EAAEI,WAAW,CAAC;EAEzC;EACAI,aAAa,EAAGR,EAAE,IAChBN,GAAG,CAACe,MAAM,CAAC,aAAaT,EAAE,EAAE,CAAC;EAE/B;EACAU,qBAAqB,EAAEA,CAACC,QAAQ,EAAEd,MAAM,GAAG,CAAC,CAAC,KAC3CH,GAAG,CAACI,GAAG,CAAC,WAAW,EAAE;IAAE,GAAGD,MAAM;IAAEc;EAAS,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,kBAAkB,EAAGC,WAAW,IAC9BpB,GAAG,CAACW,IAAI,CAAC,wBAAwB,EAAE;IAAES;EAAY,CAAC,CAAC;EAErD;EACAC,sBAAsB,EAAEA,CAACC,SAAS,EAAEC,KAAK,GAAG,KAAK,KAC/CvB,GAAG,CAACW,IAAI,CAAC,6BAA6BW,SAAS,EAAE,EAAE,CAAC,CAAC,EAAE;IAAEnB,MAAM,EAAE;MAAEoB;IAAM;EAAE,CAAC,CAAC;EAE/E;EACAC,kBAAkB,EAAEA,CAACC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,KACvC1B,GAAG,CAACI,GAAG,CAAC,mBAAmB,EAAE;IAAEqB,IAAI;IAAEC;EAAM,CAAC,CAAC;EAE/C;EACAC,eAAe,EAAGrB,EAAE,IAClBN,GAAG,CAACI,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;EAE5B;EACAsB,kBAAkB,EAAGN,SAAS,IAC5BtB,GAAG,CAACI,GAAG,CAAC,qBAAqBkB,SAAS,EAAE,CAAC;EAE3C;EACAO,eAAe,EAAEA,CAACC,UAAU,EAAEC,QAAQ,GAAG,KAAK,KAC5C/B,GAAG,CAACW,IAAI,CAAC,mBAAmB,EAAE;IAAEmB;EAAW,CAAC,EAAE;IAAE3B,MAAM,EAAE;MAAE4B;IAAS;EAAE,CAAC;AAC1E,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG;EACxB;EACAC,qBAAqB,EAAGhB,QAAQ,IAC9BjB,GAAG,CAACI,GAAG,CAAC,8BAA8B,EAAE;IAAEa;EAAS,CAAC,CAAC;EAEvD;EACAiB,gBAAgB,EAAEA,CAAA,KAChBlC,GAAG,CAACI,GAAG,CAAC,oBAAoB,CAAC;EAE/B;EACA+B,WAAW,EAAEA,CAACV,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,KAC/B1B,GAAG,CAACI,GAAG,CAAC,mBAAmB,EAAE;IAAEqB,IAAI;IAAEC;EAAM,CAAC;AAChD,CAAC;AAED,eAAe;EACbU,QAAQ,EAAEnC,UAAU;EACpBoC,QAAQ,EAAEnB,WAAW;EACrBoB,OAAO,EAAEN;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}