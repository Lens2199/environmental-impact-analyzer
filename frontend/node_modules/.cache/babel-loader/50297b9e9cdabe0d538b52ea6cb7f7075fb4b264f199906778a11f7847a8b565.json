{"ast":null,"code":"/**\n * Utility functions for the frontend application\n */\n\n/**\n * Format a date string to a readable format\n * @param {String} dateString - The date string to format\n * @param {Object} options - Formatting options for Intl.DateTimeFormat\n * @returns {String} Formatted date string\n */\nexport const formatDate = (dateString, options = {}) => {\n  const defaultOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  };\n  const dateOptions = {\n    ...defaultOptions,\n    ...options\n  };\n  try {\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('en-US', dateOptions).format(date);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString || 'Unknown date';\n  }\n};\n\n/**\n * Format a date string to a relative time format (e.g., \"2 hours ago\")\n * @param {String} dateString - The date string to format\n * @returns {String} Relative time string\n */\nexport const formatRelativeTime = dateString => {\n  try {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now - date;\n    const diffSec = Math.round(diffMs / 1000);\n    const diffMin = Math.round(diffSec / 60);\n    const diffHour = Math.round(diffMin / 60);\n    const diffDay = Math.round(diffHour / 24);\n    if (diffSec < 60) {\n      return 'just now';\n    } else if (diffMin < 60) {\n      return `${diffMin} ${diffMin === 1 ? 'minute' : 'minutes'} ago`;\n    } else if (diffHour < 24) {\n      return `${diffHour} ${diffHour === 1 ? 'hour' : 'hours'} ago`;\n    } else if (diffDay < 7) {\n      return `${diffDay} ${diffDay === 1 ? 'day' : 'days'} ago`;\n    } else {\n      return formatDate(dateString, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n  } catch (error) {\n    console.error('Error formatting relative time:', error);\n    return dateString || 'Unknown date';\n  }\n};\n\n/**\n * Truncate text to a specified length with ellipsis\n * @param {String} text - The text to truncate\n * @param {Number} maxLength - Maximum length before truncation\n * @returns {String} Truncated text\n */\nexport const truncateText = (text, maxLength = 100) => {\n  if (!text) return '';\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};\n\n/**\n * Get color class based on environmental score\n * @param {Number} score - Environmental score (1-10)\n * @returns {String} CSS class name\n */\nexport const getScoreColorClass = score => {\n  if (score >= 9) return 'score-excellent';\n  if (score >= 7) return 'score-good';\n  if (score >= 5) return 'score-average';\n  if (score >= 3) return 'score-poor';\n  return 'score-bad';\n};\n\n/**\n * Get color from theme palette based on environmental score\n * @param {Number} score - Environmental score (1-10)\n * @returns {String} Material UI color name\n */\nexport const getScoreColor = score => {\n  if (score >= 9) return 'success.main'; // Green\n  if (score >= 7) return 'success.light'; // Light green\n  if (score >= 5) return 'warning.main'; // Yellow\n  if (score >= 3) return 'warning.dark'; // Orange\n  return 'error.main'; // Red\n};\n\n/**\n * Get a descriptive label based on environmental score\n * @param {Number} score - Environmental score (1-10)\n * @returns {String} Descriptive label\n */\nexport const getScoreLabel = score => {\n  if (score >= 9) return 'Excellent';\n  if (score >= 7) return 'Good';\n  if (score >= 5) return 'Average';\n  if (score >= 3) return 'Poor';\n  return 'Bad';\n};\n\n/**\n * Format environmental score with label\n * @param {Number} score - Environmental score (1-10)\n * @returns {String} Formatted score with label\n */\nexport const formatScore = score => {\n  return `${score}/10 - ${getScoreLabel(score)}`;\n};\n\n/**\n * Create URL with query parameters\n * @param {String} baseUrl - Base URL\n * @param {Object} params - Query parameters\n * @returns {String} URL with query parameters\n */\nexport const createUrlWithParams = (baseUrl, params = {}) => {\n  const url = new URL(baseUrl, window.location.origin);\n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      url.searchParams.append(key, value);\n    }\n  });\n  return url.toString();\n};\n\n/**\n * Copy text to clipboard\n * @param {String} text - Text to copy\n * @returns {Promise} Promise that resolves when text is copied\n */\nexport const copyToClipboard = async text => {\n  try {\n    if (navigator.clipboard) {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } else {\n      // Fallback for older browsers\n      const textArea = document.createElement('textarea');\n      textArea.value = text;\n      textArea.style.position = 'fixed';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      const successful = document.execCommand('copy');\n      document.body.removeChild(textArea);\n      return successful;\n    }\n  } catch (error) {\n    console.error('Error copying to clipboard:', error);\n    return false;\n  }\n};\n\n/**\n * Debounce a function call\n * @param {Function} func - The function to debounce\n * @param {Number} wait - Wait time in milliseconds\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, wait = 300) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};","map":{"version":3,"names":["formatDate","dateString","options","defaultOptions","year","month","day","hour","minute","dateOptions","date","Date","Intl","DateTimeFormat","format","error","console","formatRelativeTime","now","diffMs","diffSec","Math","round","diffMin","diffHour","diffDay","truncateText","text","maxLength","length","substring","getScoreColorClass","score","getScoreColor","getScoreLabel","formatScore","createUrlWithParams","baseUrl","params","url","URL","window","location","origin","Object","entries","forEach","key","value","undefined","searchParams","append","toString","copyToClipboard","navigator","clipboard","writeText","textArea","document","createElement","style","position","body","appendChild","focus","select","successful","execCommand","removeChild","debounce","func","wait","timeout","executedFunction","args","later","clearTimeout","setTimeout"],"sources":["/Users/deocherisme/environmental-impact-analyzer/frontend/src/utils/helpers.js"],"sourcesContent":["/**\n * Utility functions for the frontend application\n */\n\n/**\n * Format a date string to a readable format\n * @param {String} dateString - The date string to format\n * @param {Object} options - Formatting options for Intl.DateTimeFormat\n * @returns {String} Formatted date string\n */\nexport const formatDate = (dateString, options = {}) => {\n    const defaultOptions = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n    \n    const dateOptions = { ...defaultOptions, ...options };\n    \n    try {\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('en-US', dateOptions).format(date);\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return dateString || 'Unknown date';\n    }\n  };\n  \n  /**\n   * Format a date string to a relative time format (e.g., \"2 hours ago\")\n   * @param {String} dateString - The date string to format\n   * @returns {String} Relative time string\n   */\n  export const formatRelativeTime = (dateString) => {\n    try {\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffMs = now - date;\n      const diffSec = Math.round(diffMs / 1000);\n      const diffMin = Math.round(diffSec / 60);\n      const diffHour = Math.round(diffMin / 60);\n      const diffDay = Math.round(diffHour / 24);\n      \n      if (diffSec < 60) {\n        return 'just now';\n      } else if (diffMin < 60) {\n        return `${diffMin} ${diffMin === 1 ? 'minute' : 'minutes'} ago`;\n      } else if (diffHour < 24) {\n        return `${diffHour} ${diffHour === 1 ? 'hour' : 'hours'} ago`;\n      } else if (diffDay < 7) {\n        return `${diffDay} ${diffDay === 1 ? 'day' : 'days'} ago`;\n      } else {\n        return formatDate(dateString, { year: 'numeric', month: 'short', day: 'numeric' });\n      }\n    } catch (error) {\n      console.error('Error formatting relative time:', error);\n      return dateString || 'Unknown date';\n    }\n  };\n  \n  /**\n   * Truncate text to a specified length with ellipsis\n   * @param {String} text - The text to truncate\n   * @param {Number} maxLength - Maximum length before truncation\n   * @returns {String} Truncated text\n   */\n  export const truncateText = (text, maxLength = 100) => {\n    if (!text) return '';\n    \n    if (text.length <= maxLength) return text;\n    \n    return text.substring(0, maxLength) + '...';\n  };\n  \n  /**\n   * Get color class based on environmental score\n   * @param {Number} score - Environmental score (1-10)\n   * @returns {String} CSS class name\n   */\n  export const getScoreColorClass = (score) => {\n    if (score >= 9) return 'score-excellent';\n    if (score >= 7) return 'score-good';\n    if (score >= 5) return 'score-average';\n    if (score >= 3) return 'score-poor';\n    return 'score-bad';\n  };\n  \n  /**\n   * Get color from theme palette based on environmental score\n   * @param {Number} score - Environmental score (1-10)\n   * @returns {String} Material UI color name\n   */\n  export const getScoreColor = (score) => {\n    if (score >= 9) return 'success.main'; // Green\n    if (score >= 7) return 'success.light'; // Light green\n    if (score >= 5) return 'warning.main'; // Yellow\n    if (score >= 3) return 'warning.dark'; // Orange\n    return 'error.main'; // Red\n  };\n  \n  /**\n   * Get a descriptive label based on environmental score\n   * @param {Number} score - Environmental score (1-10)\n   * @returns {String} Descriptive label\n   */\n  export const getScoreLabel = (score) => {\n    if (score >= 9) return 'Excellent';\n    if (score >= 7) return 'Good';\n    if (score >= 5) return 'Average';\n    if (score >= 3) return 'Poor';\n    return 'Bad';\n  };\n  \n  /**\n   * Format environmental score with label\n   * @param {Number} score - Environmental score (1-10)\n   * @returns {String} Formatted score with label\n   */\n  export const formatScore = (score) => {\n    return `${score}/10 - ${getScoreLabel(score)}`;\n  };\n  \n  /**\n   * Create URL with query parameters\n   * @param {String} baseUrl - Base URL\n   * @param {Object} params - Query parameters\n   * @returns {String} URL with query parameters\n   */\n  export const createUrlWithParams = (baseUrl, params = {}) => {\n    const url = new URL(baseUrl, window.location.origin);\n    \n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        url.searchParams.append(key, value);\n      }\n    });\n    \n    return url.toString();\n  };\n  \n  /**\n   * Copy text to clipboard\n   * @param {String} text - Text to copy\n   * @returns {Promise} Promise that resolves when text is copied\n   */\n  export const copyToClipboard = async (text) => {\n    try {\n      if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text);\n        return true;\n      } else {\n        // Fallback for older browsers\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        const successful = document.execCommand('copy');\n        document.body.removeChild(textArea);\n        return successful;\n      }\n    } catch (error) {\n      console.error('Error copying to clipboard:', error);\n      return false;\n    }\n  };\n  \n  /**\n   * Debounce a function call\n   * @param {Function} func - The function to debounce\n   * @param {Number} wait - Wait time in milliseconds\n   * @returns {Function} Debounced function\n   */\n  export const debounce = (func, wait = 300) => {\n    let timeout;\n    \n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      \n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  };"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAGA,CAACC,UAAU,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACpD,MAAMC,cAAc,GAAG;IACrBC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC;EAED,MAAMC,WAAW,GAAG;IAAE,GAAGN,cAAc;IAAE,GAAGD;EAAQ,CAAC;EAErD,IAAI;IACF,MAAMQ,IAAI,GAAG,IAAIC,IAAI,CAACV,UAAU,CAAC;IACjC,OAAO,IAAIW,IAAI,CAACC,cAAc,CAAC,OAAO,EAAEJ,WAAW,CAAC,CAACK,MAAM,CAACJ,IAAI,CAAC;EACnE,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAOd,UAAU,IAAI,cAAc;EACrC;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMgB,kBAAkB,GAAIhB,UAAU,IAAK;EAChD,IAAI;IACF,MAAMS,IAAI,GAAG,IAAIC,IAAI,CAACV,UAAU,CAAC;IACjC,MAAMiB,GAAG,GAAG,IAAIP,IAAI,CAAC,CAAC;IACtB,MAAMQ,MAAM,GAAGD,GAAG,GAAGR,IAAI;IACzB,MAAMU,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAG,IAAI,CAAC;IACzC,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;IACxC,MAAMI,QAAQ,GAAGH,IAAI,CAACC,KAAK,CAACC,OAAO,GAAG,EAAE,CAAC;IACzC,MAAME,OAAO,GAAGJ,IAAI,CAACC,KAAK,CAACE,QAAQ,GAAG,EAAE,CAAC;IAEzC,IAAIJ,OAAO,GAAG,EAAE,EAAE;MAChB,OAAO,UAAU;IACnB,CAAC,MAAM,IAAIG,OAAO,GAAG,EAAE,EAAE;MACvB,OAAO,GAAGA,OAAO,IAAIA,OAAO,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAS,MAAM;IACjE,CAAC,MAAM,IAAIC,QAAQ,GAAG,EAAE,EAAE;MACxB,OAAO,GAAGA,QAAQ,IAAIA,QAAQ,KAAK,CAAC,GAAG,MAAM,GAAG,OAAO,MAAM;IAC/D,CAAC,MAAM,IAAIC,OAAO,GAAG,CAAC,EAAE;MACtB,OAAO,GAAGA,OAAO,IAAIA,OAAO,KAAK,CAAC,GAAG,KAAK,GAAG,MAAM,MAAM;IAC3D,CAAC,MAAM;MACL,OAAOzB,UAAU,CAACC,UAAU,EAAE;QAAEG,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,OAAO;QAAEC,GAAG,EAAE;MAAU,CAAC,CAAC;IACpF;EACF,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAOd,UAAU,IAAI,cAAc;EACrC;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMyB,YAAY,GAAGA,CAACC,IAAI,EAAEC,SAAS,GAAG,GAAG,KAAK;EACrD,IAAI,CAACD,IAAI,EAAE,OAAO,EAAE;EAEpB,IAAIA,IAAI,CAACE,MAAM,IAAID,SAAS,EAAE,OAAOD,IAAI;EAEzC,OAAOA,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEF,SAAS,CAAC,GAAG,KAAK;AAC7C,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMG,kBAAkB,GAAIC,KAAK,IAAK;EAC3C,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,iBAAiB;EACxC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,YAAY;EACnC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,eAAe;EACtC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,YAAY;EACnC,OAAO,WAAW;AACpB,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMC,aAAa,GAAID,KAAK,IAAK;EACtC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,cAAc,CAAC,CAAC;EACvC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,eAAe,CAAC,CAAC;EACxC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,cAAc,CAAC,CAAC;EACvC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,cAAc,CAAC,CAAC;EACvC,OAAO,YAAY,CAAC,CAAC;AACvB,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAME,aAAa,GAAIF,KAAK,IAAK;EACtC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,WAAW;EAClC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,MAAM;EAC7B,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,SAAS;EAChC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,MAAM;EAC7B,OAAO,KAAK;AACd,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMG,WAAW,GAAIH,KAAK,IAAK;EACpC,OAAO,GAAGA,KAAK,SAASE,aAAa,CAACF,KAAK,CAAC,EAAE;AAChD,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMI,mBAAmB,GAAGA,CAACC,OAAO,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EAC3D,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACH,OAAO,EAAEI,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;EAEpDC,MAAM,CAACC,OAAO,CAACP,MAAM,CAAC,CAACQ,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;IAC/C,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,EAAE,EAAE;MACzDT,GAAG,CAACW,YAAY,CAACC,MAAM,CAACJ,GAAG,EAAEC,KAAK,CAAC;IACrC;EACF,CAAC,CAAC;EAEF,OAAOT,GAAG,CAACa,QAAQ,CAAC,CAAC;AACvB,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMC,eAAe,GAAG,MAAO1B,IAAI,IAAK;EAC7C,IAAI;IACF,IAAI2B,SAAS,CAACC,SAAS,EAAE;MACvB,MAAMD,SAAS,CAACC,SAAS,CAACC,SAAS,CAAC7B,IAAI,CAAC;MACzC,OAAO,IAAI;IACb,CAAC,MAAM;MACL;MACA,MAAM8B,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;MACnDF,QAAQ,CAACT,KAAK,GAAGrB,IAAI;MACrB8B,QAAQ,CAACG,KAAK,CAACC,QAAQ,GAAG,OAAO;MACjCH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,QAAQ,CAAC;MACnCA,QAAQ,CAACO,KAAK,CAAC,CAAC;MAChBP,QAAQ,CAACQ,MAAM,CAAC,CAAC;MACjB,MAAMC,UAAU,GAAGR,QAAQ,CAACS,WAAW,CAAC,MAAM,CAAC;MAC/CT,QAAQ,CAACI,IAAI,CAACM,WAAW,CAACX,QAAQ,CAAC;MACnC,OAAOS,UAAU;IACnB;EACF,CAAC,CAAC,OAAOnD,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMsD,QAAQ,GAAGA,CAACC,IAAI,EAAEC,IAAI,GAAG,GAAG,KAAK;EAC5C,IAAIC,OAAO;EAEX,OAAO,SAASC,gBAAgBA,CAAC,GAAGC,IAAI,EAAE;IACxC,MAAMC,KAAK,GAAGA,CAAA,KAAM;MAClBC,YAAY,CAACJ,OAAO,CAAC;MACrBF,IAAI,CAAC,GAAGI,IAAI,CAAC;IACf,CAAC;IAEDE,YAAY,CAACJ,OAAO,CAAC;IACrBA,OAAO,GAAGK,UAAU,CAACF,KAAK,EAAEJ,IAAI,CAAC;EACnC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}