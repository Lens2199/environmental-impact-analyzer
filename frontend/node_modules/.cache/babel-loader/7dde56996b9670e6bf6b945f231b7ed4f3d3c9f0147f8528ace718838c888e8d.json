{"ast":null,"code":"var _jsxFileName = \"/Users/deocherisme/environmental-impact-analyzer/frontend/src/context/AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { analysisAPI } from '../services/api';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\n/**\n * AppContext Provider Component\n * Manages global application state\n */\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // Recent analyses state\n  const [recentAnalyses, setRecentAnalyses] = useState([]);\n  const [loadingAnalyses, setLoadingAnalyses] = useState(false);\n  const [analysesError, setAnalysesError] = useState(null);\n\n  // Selected products for comparison - initialize as empty array\n  const [selectedProducts, setSelectedProducts] = useState([]);\n\n  // NEW: Store full product objects, not just IDs\n  const [selectedProductObjects, setSelectedProductObjects] = useState([]);\n\n  // User preferences (could be expanded or stored in localStorage)\n  const [preferences, setPreferences] = useState({\n    darkMode: false,\n    showScores: true,\n    defaultView: 'grid'\n  });\n\n  // Notifications\n  const [notifications, setNotifications] = useState([]);\n\n  // Fetch recent analyses on component mount\n  useEffect(() => {\n    fetchRecentAnalyses();\n    console.log('AppContext initialized');\n  }, []);\n\n  // Function to fetch recent analyses\n  const fetchRecentAnalyses = async () => {\n    try {\n      setLoadingAnalyses(true);\n      setAnalysesError(null);\n      const response = await analysisAPI.getAnalysisHistory();\n      setRecentAnalyses(response.data.analyses || response.data || []);\n    } catch (error) {\n      console.error('Error fetching analyses:', error);\n      setAnalysesError('Failed to load recent analyses');\n    } finally {\n      setLoadingAnalyses(false);\n    }\n  };\n\n  // Helper to get product ID consistently\n  const getProductId = product => {\n    if (!product) return null;\n    return product._id || product.id || null;\n  };\n\n  // Add or remove product from selected products for comparison - ENHANCED TO STORE FULL OBJECTS\n  const toggleProductSelection = (productId, productObject = null) => {\n    console.log('toggleProductSelection called with:', productId);\n\n    // Guard against undefined values\n    if (!productId) {\n      console.error('Attempted to toggle selection with invalid productId:', productId);\n      return;\n    }\n    setSelectedProducts(prevSelected => {\n      console.log('Previous selected products:', prevSelected);\n\n      // Make a defensive copy of prevSelected to ensure it's an array\n      const safeSelected = Array.isArray(prevSelected) ? [...prevSelected] : [];\n\n      // Check if already selected\n      if (safeSelected.includes(productId)) {\n        console.log('Removing product from selection');\n\n        // Also remove from product objects\n        setSelectedProductObjects(prev => prev.filter(product => getProductId(product) !== productId));\n        const newSelection = safeSelected.filter(id => id !== productId);\n        console.log('New selection will be:', newSelection);\n        return newSelection;\n      } else {\n        // Add if fewer than 3 already selected\n        if (safeSelected.length < 3) {\n          console.log('Adding product to selection');\n\n          // Add to product objects if provided\n          if (productObject) {\n            setSelectedProductObjects(prev => [...prev, productObject]);\n          }\n          const newSelection = [...safeSelected, productId];\n          console.log('New selection will be:', newSelection);\n          return newSelection;\n        } else {\n          console.log('Selection limit reached, not adding');\n          // Add notification about max products\n          addNotification({\n            type: 'warning',\n            message: 'You can only compare up to 3 products at a time',\n            duration: 3000\n          });\n          return safeSelected;\n        }\n      }\n    });\n  };\n\n  // Clear all selected products\n  const clearSelectedProducts = () => {\n    console.log('Clearing all selected products');\n    setSelectedProducts([]);\n    setSelectedProductObjects([]); // Clear product objects too\n  };\n\n  // Update user preferences\n  const updatePreferences = newPreferences => {\n    setPreferences({\n      ...preferences,\n      ...newPreferences\n    });\n\n    // In a real app, you might save preferences to localStorage\n    localStorage.setItem('userPreferences', JSON.stringify({\n      ...preferences,\n      ...newPreferences\n    }));\n  };\n\n  // Add notification\n  const addNotification = notification => {\n    const id = Date.now();\n    const newNotification = {\n      id,\n      type: notification.type || 'info',\n      message: notification.message,\n      duration: notification.duration || 5000\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove notification after duration\n    if (newNotification.duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, newNotification.duration);\n    }\n  };\n\n  // Remove notification\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  // Load stored preferences from localStorage\n  useEffect(() => {\n    try {\n      const storedPreferences = localStorage.getItem('userPreferences');\n      if (storedPreferences) {\n        setPreferences(JSON.parse(storedPreferences));\n      }\n    } catch (error) {\n      console.error('Error loading preferences:', error);\n    }\n  }, []);\n\n  // Debug effect to log selected products changes\n  useEffect(() => {\n    console.log('selectedProducts state changed to:', selectedProducts);\n  }, [selectedProducts]);\n\n  // Debug effect to log selected product objects\n  useEffect(() => {\n    console.log('selectedProductObjects state changed to:', selectedProductObjects);\n  }, [selectedProductObjects]);\n\n  // Value to be provided by the context\n  const contextValue = {\n    // Analyses\n    recentAnalyses,\n    loadingAnalyses,\n    analysesError,\n    fetchRecentAnalyses,\n    // Products for comparison\n    selectedProducts,\n    selectedProductObjects,\n    // NEW: Export full objects\n    toggleProductSelection,\n    clearSelectedProducts,\n    getProductId,\n    // NEW: Helper function\n\n    // User preferences\n    preferences,\n    updatePreferences,\n    // Notifications\n    notifications,\n    addNotification,\n    removeNotification\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"UtUTcL6F1W6jXRsXDSTjiwONGUk=\");\n_c = AppProvider;\nAppProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n/**\n * Custom hook to use the app context\n */\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","PropTypes","analysisAPI","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","recentAnalyses","setRecentAnalyses","loadingAnalyses","setLoadingAnalyses","analysesError","setAnalysesError","selectedProducts","setSelectedProducts","selectedProductObjects","setSelectedProductObjects","preferences","setPreferences","darkMode","showScores","defaultView","notifications","setNotifications","fetchRecentAnalyses","console","log","response","getAnalysisHistory","data","analyses","error","getProductId","product","_id","id","toggleProductSelection","productId","productObject","prevSelected","safeSelected","Array","isArray","includes","prev","filter","newSelection","length","addNotification","type","message","duration","clearSelectedProducts","updatePreferences","newPreferences","localStorage","setItem","JSON","stringify","notification","Date","now","newNotification","setTimeout","removeNotification","storedPreferences","getItem","parse","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","useAppContext","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/deocherisme/environmental-impact-analyzer/frontend/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { analysisAPI } from '../services/api';\n\n// Create context\nconst AppContext = createContext();\n\n/**\n * AppContext Provider Component\n * Manages global application state\n */\nexport const AppProvider = ({ children }) => {\n  // Recent analyses state\n  const [recentAnalyses, setRecentAnalyses] = useState([]);\n  const [loadingAnalyses, setLoadingAnalyses] = useState(false);\n  const [analysesError, setAnalysesError] = useState(null);\n  \n  // Selected products for comparison - initialize as empty array\n  const [selectedProducts, setSelectedProducts] = useState([]);\n  \n  // NEW: Store full product objects, not just IDs\n  const [selectedProductObjects, setSelectedProductObjects] = useState([]);\n  \n  // User preferences (could be expanded or stored in localStorage)\n  const [preferences, setPreferences] = useState({\n    darkMode: false,\n    showScores: true,\n    defaultView: 'grid',\n  });\n  \n  // Notifications\n  const [notifications, setNotifications] = useState([]);\n  \n  // Fetch recent analyses on component mount\n  useEffect(() => {\n    fetchRecentAnalyses();\n    console.log('AppContext initialized');\n  }, []);\n  \n  // Function to fetch recent analyses\n  const fetchRecentAnalyses = async () => {\n    try {\n      setLoadingAnalyses(true);\n      setAnalysesError(null);\n      \n      const response = await analysisAPI.getAnalysisHistory();\n      setRecentAnalyses(response.data.analyses || response.data || []);\n      \n    } catch (error) {\n      console.error('Error fetching analyses:', error);\n      setAnalysesError('Failed to load recent analyses');\n    } finally {\n      setLoadingAnalyses(false);\n    }\n  };\n  \n  // Helper to get product ID consistently\n  const getProductId = (product) => {\n    if (!product) return null;\n    return product._id || product.id || null;\n  };\n  \n  // Add or remove product from selected products for comparison - ENHANCED TO STORE FULL OBJECTS\n  const toggleProductSelection = (productId, productObject = null) => {\n    console.log('toggleProductSelection called with:', productId);\n    \n    // Guard against undefined values\n    if (!productId) {\n      console.error('Attempted to toggle selection with invalid productId:', productId);\n      return;\n    }\n    \n    setSelectedProducts(prevSelected => {\n      console.log('Previous selected products:', prevSelected);\n      \n      // Make a defensive copy of prevSelected to ensure it's an array\n      const safeSelected = Array.isArray(prevSelected) ? [...prevSelected] : [];\n      \n      // Check if already selected\n      if (safeSelected.includes(productId)) {\n        console.log('Removing product from selection');\n        \n        // Also remove from product objects\n        setSelectedProductObjects(prev => \n          prev.filter(product => getProductId(product) !== productId)\n        );\n        \n        const newSelection = safeSelected.filter(id => id !== productId);\n        console.log('New selection will be:', newSelection);\n        return newSelection;\n      } else {\n        // Add if fewer than 3 already selected\n        if (safeSelected.length < 3) {\n          console.log('Adding product to selection');\n          \n          // Add to product objects if provided\n          if (productObject) {\n            setSelectedProductObjects(prev => [...prev, productObject]);\n          }\n          \n          const newSelection = [...safeSelected, productId];\n          console.log('New selection will be:', newSelection);\n          return newSelection;\n        } else {\n          console.log('Selection limit reached, not adding');\n          // Add notification about max products\n          addNotification({\n            type: 'warning',\n            message: 'You can only compare up to 3 products at a time',\n            duration: 3000\n          });\n          return safeSelected;\n        }\n      }\n    });\n  };\n  \n  // Clear all selected products\n  const clearSelectedProducts = () => {\n    console.log('Clearing all selected products');\n    setSelectedProducts([]);\n    setSelectedProductObjects([]);  // Clear product objects too\n  };\n  \n  // Update user preferences\n  const updatePreferences = (newPreferences) => {\n    setPreferences({ ...preferences, ...newPreferences });\n    \n    // In a real app, you might save preferences to localStorage\n    localStorage.setItem('userPreferences', JSON.stringify({\n      ...preferences,\n      ...newPreferences\n    }));\n  };\n  \n  // Add notification\n  const addNotification = (notification) => {\n    const id = Date.now();\n    const newNotification = {\n      id,\n      type: notification.type || 'info',\n      message: notification.message,\n      duration: notification.duration || 5000\n    };\n    \n    setNotifications(prev => [...prev, newNotification]);\n    \n    // Auto-remove notification after duration\n    if (newNotification.duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, newNotification.duration);\n    }\n  };\n  \n  // Remove notification\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n  \n  // Load stored preferences from localStorage\n  useEffect(() => {\n    try {\n      const storedPreferences = localStorage.getItem('userPreferences');\n      if (storedPreferences) {\n        setPreferences(JSON.parse(storedPreferences));\n      }\n    } catch (error) {\n      console.error('Error loading preferences:', error);\n    }\n  }, []);\n  \n  // Debug effect to log selected products changes\n  useEffect(() => {\n    console.log('selectedProducts state changed to:', selectedProducts);\n  }, [selectedProducts]);\n  \n  // Debug effect to log selected product objects\n  useEffect(() => {\n    console.log('selectedProductObjects state changed to:', selectedProductObjects);\n  }, [selectedProductObjects]);\n  \n  // Value to be provided by the context\n  const contextValue = {\n    // Analyses\n    recentAnalyses,\n    loadingAnalyses,\n    analysesError,\n    fetchRecentAnalyses,\n    \n    // Products for comparison\n    selectedProducts,\n    selectedProductObjects,  // NEW: Export full objects\n    toggleProductSelection,\n    clearSelectedProducts,\n    getProductId,            // NEW: Helper function\n    \n    // User preferences\n    preferences,\n    updatePreferences,\n    \n    // Notifications\n    notifications,\n    addNotification,\n    removeNotification\n  };\n  \n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nAppProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n/**\n * Custom hook to use the app context\n */\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}