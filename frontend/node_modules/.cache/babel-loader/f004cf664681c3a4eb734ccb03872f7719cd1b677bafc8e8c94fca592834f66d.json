{"ast":null,"code":"import axios from 'axios';\n\n/**\n * Enhanced API service with interceptors and error handling\n */\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5010/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 60000 // Increase to 60 seconds\n});\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  // Add authorization header if needed (for future authentication)\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Log requests in development environment\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`);\n    if (config.data) {\n      console.log('Request Data:', config.data);\n    }\n  }\n  return config;\n}, error => {\n  // Handle request errors\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  // Log responses in development environment\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(`API Response: ${response.status} ${response.config.url}`);\n  }\n  return response;\n}, error => {\n  var _response$data, _response$data2, _response$data3;\n  // Handle response errors\n  const {\n    response\n  } = error;\n\n  // Log error details\n  console.error('API Response Error:', error);\n  if (response) {\n    var _response$data4, _response$data5;\n    // Handle specific status codes\n    switch (response.status) {\n      case 401:\n        // Unauthorized - Handle token expiration or login issues\n        console.error('Authentication error - Please log in again');\n        // Clear auth token\n        localStorage.removeItem('authToken');\n        // In a real app, redirect to login page\n        break;\n      case 403:\n        // Forbidden - User doesn't have permission\n        console.error('Authorization error - Access denied');\n        break;\n      case 404:\n        // Not found\n        console.error(`Resource not found: ${response.config.url}`);\n        break;\n      case 422:\n        // Validation error\n        console.error('Validation error:', ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.errors) || 'Invalid data');\n        break;\n      case 500:\n        // Server error\n        console.error('Server error:', ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.message) || 'Internal server error');\n        break;\n      default:\n        // Other errors\n        console.error(`Error ${response.status}:`, ((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.message) || 'Unknown error');\n    }\n\n    // Return a formatted error for consistent handling\n    return Promise.reject({\n      status: response.status,\n      message: ((_response$data4 = response.data) === null || _response$data4 === void 0 ? void 0 : _response$data4.message) || 'An error occurred',\n      errors: (_response$data5 = response.data) === null || _response$data5 === void 0 ? void 0 : _response$data5.errors,\n      data: response.data\n    });\n  }\n\n  // Handle network errors (no response from server)\n  if (error.request) {\n    console.error('Network Error - No response from server');\n    return Promise.reject({\n      status: 0,\n      message: 'Network error - Unable to connect to server',\n      isNetworkError: true\n    });\n  }\n\n  // Handle other errors\n  return Promise.reject({\n    message: error.message || 'An unexpected error occurred',\n    isUnexpectedError: true\n  });\n});\n\n// Helper functions for common request methods\nconst api = {\n  /**\n   * Perform a GET request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} params - Query parameters\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  get: async (endpoint, params = {}, options = {}) => {\n    try {\n      const response = await apiClient.get(endpoint, {\n        params,\n        ...options\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\n   * Perform a POST request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request body data\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  post: async (endpoint, data = {}, options = {}) => {\n    try {\n      const response = await apiClient.post(endpoint, data, options);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\n   * Perform a PUT request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request body data\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  put: async (endpoint, data = {}, options = {}) => {\n    try {\n      const response = await apiClient.put(endpoint, data, options);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\n   * Perform a PATCH request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request body data\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  patch: async (endpoint, data = {}, options = {}) => {\n    try {\n      const response = await apiClient.patch(endpoint, data, options);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\n   * Perform a DELETE request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  delete: async (endpoint, options = {}) => {\n    try {\n      const response = await apiClient.delete(endpoint, options);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","NODE_ENV","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_response$data","_response$data2","_response$data3","_response$data4","_response$data5","removeItem","errors","message","isNetworkError","isUnexpectedError","api","get","endpoint","params","options","post","put","patch","delete"],"sources":["/Users/deocherisme/environmental-impact-analyzer/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n/**\n * Enhanced API service with interceptors and error handling\n */\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5010/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 60000, // Increase to 60 seconds\n});\n\n// Request interceptor\napiClient.interceptors.request.use(\n  (config) => {\n    // Add authorization header if needed (for future authentication)\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    // Log requests in development environment\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`);\n      if (config.data) {\n        console.log('Request Data:', config.data);\n      }\n    }\n    \n    return config;\n  },\n  (error) => {\n    // Handle request errors\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napiClient.interceptors.response.use(\n  (response) => {\n    // Log responses in development environment\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(`API Response: ${response.status} ${response.config.url}`);\n    }\n    \n    return response;\n  },\n  (error) => {\n    // Handle response errors\n    const { response } = error;\n    \n    // Log error details\n    console.error('API Response Error:', error);\n    \n    if (response) {\n      // Handle specific status codes\n      switch (response.status) {\n        case 401:\n          // Unauthorized - Handle token expiration or login issues\n          console.error('Authentication error - Please log in again');\n          // Clear auth token\n          localStorage.removeItem('authToken');\n          // In a real app, redirect to login page\n          break;\n          \n        case 403:\n          // Forbidden - User doesn't have permission\n          console.error('Authorization error - Access denied');\n          break;\n          \n        case 404:\n          // Not found\n          console.error(`Resource not found: ${response.config.url}`);\n          break;\n          \n        case 422:\n          // Validation error\n          console.error('Validation error:', response.data?.errors || 'Invalid data');\n          break;\n          \n        case 500:\n          // Server error\n          console.error('Server error:', response.data?.message || 'Internal server error');\n          break;\n          \n        default:\n          // Other errors\n          console.error(`Error ${response.status}:`, response.data?.message || 'Unknown error');\n      }\n      \n      // Return a formatted error for consistent handling\n      return Promise.reject({\n        status: response.status,\n        message: response.data?.message || 'An error occurred',\n        errors: response.data?.errors,\n        data: response.data\n      });\n    }\n    \n    // Handle network errors (no response from server)\n    if (error.request) {\n      console.error('Network Error - No response from server');\n      return Promise.reject({\n        status: 0,\n        message: 'Network error - Unable to connect to server',\n        isNetworkError: true\n      });\n    }\n    \n    // Handle other errors\n    return Promise.reject({\n      message: error.message || 'An unexpected error occurred',\n      isUnexpectedError: true\n    });\n  }\n);\n\n// Helper functions for common request methods\nconst api = {\n  /**\n   * Perform a GET request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} params - Query parameters\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  get: async (endpoint, params = {}, options = {}) => {\n    try {\n      const response = await apiClient.get(endpoint, {\n        params,\n        ...options\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  /**\n   * Perform a POST request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request body data\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  post: async (endpoint, data = {}, options = {}) => {\n    try {\n      const response = await apiClient.post(endpoint, data, options);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  /**\n   * Perform a PUT request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request body data\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  put: async (endpoint, data = {}, options = {}) => {\n    try {\n      const response = await apiClient.put(endpoint, data, options);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  /**\n   * Perform a PATCH request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} data - Request body data\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  patch: async (endpoint, data = {}, options = {}) => {\n    try {\n      const response = await apiClient.patch(endpoint, data, options);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  /**\n   * Perform a DELETE request\n   * @param {string} endpoint - API endpoint\n   * @param {Object} options - Additional axios options\n   * @returns {Promise} Promise that resolves with response data\n   */\n  delete: async (endpoint, options = {}) => {\n    try {\n      const response = await apiClient.delete(endpoint, options);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}